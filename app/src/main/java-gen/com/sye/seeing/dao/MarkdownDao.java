package com.sye.seeing.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sye.seeing.dao.Markdown;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MARKDOWN".
*/
public class MarkdownDao extends AbstractDao<Markdown, Long> {

    public static final String TABLENAME = "MARKDOWN";

    /**
     * Properties of entity Markdown.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property CreateTime = new Property(2, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property LastTime = new Property(3, Long.class, "lastTime", false, "LAST_TIME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property LocalPath = new Property(5, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property Size = new Property(6, Long.class, "size", false, "SIZE");
    };


    public MarkdownDao(DaoConfig config) {
        super(config);
    }
    
    public MarkdownDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARKDOWN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"CREATE_TIME\" INTEGER," + // 2: createTime
                "\"LAST_TIME\" INTEGER," + // 3: lastTime
                "\"CONTENT\" TEXT," + // 4: content
                "\"LOCAL_PATH\" TEXT," + // 5: localPath
                "\"SIZE\" INTEGER);"); // 6: size
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARKDOWN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Markdown entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(3, createTime);
        }
 
        Long lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindLong(4, lastTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(6, localPath);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(7, size);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Markdown readEntity(Cursor cursor, int offset) {
        Markdown entity = new Markdown( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // lastTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // localPath
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // size
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Markdown entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLastTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocalPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSize(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Markdown entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Markdown entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
